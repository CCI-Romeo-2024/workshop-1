import { db } from './lib/supaBase.js'
let scoreBoard = []

const getRowHtml = (element) => {
    return `
<tr id="table-${element.id}">
    <td class="name">${element.pseudo}</td>
    <td class="score">${element.score.toLocaleString('fr-FR')}</td>
    <td class="add-btn"><button onclick="addPoints(${element.id}, 10)">add 10</button></td>
</tr>
`
}


const createTable = (table) => {
    const tableB = document.getElementById('table-body');

    tableB.innerHTML = '';

    table.sort((a, b) => ( parseInt(b.score) - parseInt(a.score) ))

    table.forEach((data) => {
        tableB.innerHTML += getRowHtml(data);
    })
}


(async () => {
    let { data: players, error } = await db
        .from('players')
        .select('id, pseudo, score, avatar')

    if (error) return console.error(error);

    scoreBoard = [...players];

    createTable(scoreBoard)
})()




const handleNewUsers = (payload) => {
    scoreBoard.push({...payload.new})

    createTable(scoreBoard)
    filtrer()
}

const handleScoreChange = (payload) => {
    scoreBoard.find(e => e.id === payload.new.id).score = payload.new.score

    createTable(scoreBoard)
    filtrer()
}

const dbEvents = db
    .channel('schema-db-changes')
    .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'players' }, handleNewUsers)
    .on('postgres_changes', { event: 'UPDATE', schema: 'public', table: 'players' }, handleScoreChange)
    .subscribe()



async function addPoints(id, points) {
    if (!localStorage.getItem('logged')) window.location.href = "admin.html"
    const { data, error } = await db
            .rpc('increment', { x: points, row_id: id })

}

function filtrer() {
    let filtre, tableau, ligne, cellule, i, texte;

    filtre = document.getElementById("maRecherche").value.toUpperCase();
    tableau = document.getElementById("tableau");
    ligne = tableau.getElementsByTagName("tr");

    for (i = 0; i < ligne.length; i++) {
        cellule = ligne[i].querySelector(".name");
        if (cellule) {
        texte = cellule.innerText;
        if (texte.toUpperCase().indexOf(filtre) > -1) {
            ligne[i].style.display = "";
        } else {
            ligne[i].style.display = "none";
        }
        }
    }
}

window.filtrer = filtrer
window.addPoints = addPoints

/*
create table
  public.players (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    pseudo text null,
    avatar integer null,
    score integer null default 0,
    constraint players_pkey primary key (id)
  ) tablespace pg_default;
*/